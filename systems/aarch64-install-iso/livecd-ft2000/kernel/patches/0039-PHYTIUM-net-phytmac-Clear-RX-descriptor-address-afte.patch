From f02721d8dc13b11f27822f2dfbd4b10fda0c07e5 Mon Sep 17 00:00:00 2001
From: Li Wencheng <liwencheng@phytium.com.cn>
Date: Wed, 7 May 2025 17:22:12 +0800
Subject: [PATCH 39/67] PHYTIUM: net/phytmac: Clear RX descriptor address after
 the skb construction

If the skb build failed, the descriptor address has been cleared,
and the current descriptor will be considered invalid in the next
round of processing.

Signed-off-by: Li Wencheng <liwencheng@phytium.com.cn>
Signed-off-by: Wang Yinfeng <wangyinfeng@phytium.com.cn>
Change-Id: I67900da07421ed3773e3f29dd2ddb16ce39fae1d

Link: https://gitee.com/phytium_embedded/phytium-linux-kernel/commit/35be7e0f4fe7ed1612b14c56a83f497d06138afd
Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/net/ethernet/phytium/phytmac.h      | 2 +-
 drivers/net/ethernet/phytium/phytmac_main.c | 7 +++----
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/phytium/phytmac.h b/drivers/net/ethernet/phytium/phytmac.h
index 1d89c9bd023d..5ea2a383c107 100644
--- a/drivers/net/ethernet/phytium/phytmac.h
+++ b/drivers/net/ethernet/phytium/phytmac.h
@@ -16,7 +16,7 @@

 #define PHYTMAC_DRV_NAME		"phytium-mac"
 #define PHYTMAC_DRV_DESC		"PHYTIUM Ethernet Driver"
-#define PHYTMAC_DRIVER_VERSION		"1.0.43"
+#define PHYTMAC_DRIVER_VERSION		"1.0.44"
 #define PHYTMAC_DEFAULT_MSG_ENABLE	  \
 		(NETIF_MSG_DRV		| \
 		NETIF_MSG_PROBE	| \
diff --git a/drivers/net/ethernet/phytium/phytmac_main.c b/drivers/net/ethernet/phytium/phytmac_main.c
index 26d70d9ccaef..df0aea0de7a4 100644
--- a/drivers/net/ethernet/phytium/phytmac_main.c
+++ b/drivers/net/ethernet/phytium/phytmac_main.c
@@ -972,8 +972,6 @@ static struct sk_buff *phytmac_rx_xdp_single(struct phytmac_queue *queue,
 	len = hw_if->get_rx_pkt_len(pdata, desc);
 	rx_buffer = phytmac_get_rx_buffer(queue, queue->rx_tail, len);

-	hw_if->zero_rx_desc_addr(desc);
-
 #if (PAGE_SIZE < 8192)
 	frame_sz = PHYTMAC_RX_PAGE_SIZE / 2;
 #else
@@ -996,6 +994,7 @@ static struct sk_buff *phytmac_rx_xdp_single(struct phytmac_queue *queue,
 		} else {
 			rx_buffer->pagecnt_bias++;
 		}
+		hw_if->zero_rx_desc_addr(desc);
 		phytmac_put_rx_buffer(queue, rx_buffer);
 		pdata->ndev->stats.rx_bytes += len;
 		queue->stats.rx_bytes += len;
@@ -1016,7 +1015,6 @@ static struct sk_buff *phytmac_rx_single(struct phytmac_queue *queue, struct phy

 	len = hw_if->get_rx_pkt_len(pdata, desc);
 	rx_buffer = phytmac_get_rx_buffer(queue, queue->rx_tail, len);
-	hw_if->zero_rx_desc_addr(desc);

 	skb = phytmac_build_skb(rx_buffer, len);
 	if (unlikely(!skb)) {
@@ -1028,6 +1026,7 @@ static struct sk_buff *phytmac_rx_single(struct phytmac_queue *queue, struct phy
 		return NULL;
 	}

+	hw_if->zero_rx_desc_addr(desc);
 	phytmac_put_rx_buffer(queue, rx_buffer);

 	skb->protocol = eth_type_trans(skb, pdata->ndev);
@@ -1063,7 +1062,6 @@ static struct sk_buff *phytmac_rx_frame(struct phytmac_queue *queue,

 	desc = phytmac_get_rx_desc(queue, first_frag);
 	rx_buffer = phytmac_get_rx_buffer(queue, first_frag, frag_len);
-	hw_if->zero_rx_desc_addr(desc);

 	skb = phytmac_build_skb(rx_buffer, frag_len);
 	if (unlikely(!skb)) {
@@ -1074,6 +1072,7 @@ static struct sk_buff *phytmac_rx_frame(struct phytmac_queue *queue,
 		return NULL;
 	}

+	hw_if->zero_rx_desc_addr(desc);
 	phytmac_put_rx_buffer(queue, rx_buffer);

 	for (frag = first_frag + 1; ; frag++) {
--
2.50.1
