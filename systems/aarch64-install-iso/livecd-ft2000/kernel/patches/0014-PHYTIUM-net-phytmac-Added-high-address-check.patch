From d0eca7c13d5b0c4b775f5d468cbb3c352734686b Mon Sep 17 00:00:00 2001
From: Li Wencheng <liwencheng@phytium.com.cn>
Date: Fri, 26 Apr 2024 14:33:32 +0800
Subject: [PATCH 14/67] PHYTIUM: net/phytmac:Added high address check

A maximum of three DMA ring addresses can be allocated,
and check whether the high addresses in multiple queues
are consistent after the address is assigned.

Mainline: NA
Signed-off-by: Li Wencheng <liwencheng@phytium.com.cn>
Signed-off-by: Wang Yinfeng <wangyinfeng@phytium.com.cn>
Change-Id: Ifd4d5c486341e1ed4cc1e433799bc53d15647f15

Link: https://gitee.com/phytium_embedded/phytium-linux-kernel/commit/1ed603cd93296e432c6322f6fac2d968170eafd0
Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/net/ethernet/phytium/phytmac_main.c | 103 ++++++++++++++------
 1 file changed, 74 insertions(+), 29 deletions(-)

diff --git a/drivers/net/ethernet/phytium/phytmac_main.c b/drivers/net/ethernet/phytium/phytmac_main.c
index c172103a9736..07f8476946bc 100644
--- a/drivers/net/ethernet/phytium/phytmac_main.c
+++ b/drivers/net/ethernet/phytium/phytmac_main.c
@@ -46,6 +46,7 @@ MODULE_PARM_DESC(debug, "Debug level (0=none,...,16=all)");
 #define RX_BUFFER_MULTIPLE	64  /* bytes */
 #define MAX_MTU 3072
 #define RING_ADDR_INTERVAL 128
+#define MAX_RING_ADDR_ALLOC_TIMES 3

 #define RX_RING_BYTES(pdata)	(sizeof(struct phytmac_dma_desc)	\
 				 * (pdata)->rx_ring_size)
@@ -60,6 +61,23 @@ MODULE_PARM_DESC(debug, "Debug level (0=none,...,16=all)");
  * space in the SRAM (16KB) even when there is.
  */

+static int phytmac_queue_phyaddr_check(struct phytmac *pdata, dma_addr_t ring_base_addr,
+				       int offset)
+{
+	u32 bus_addr_high;
+	int i;
+
+	/* Check the high address of the DMA ring. */
+	bus_addr_high = upper_32_bits(ring_base_addr);
+	for (i = 1; i < pdata->queues_num; i++) {
+		ring_base_addr += offset;
+		if (bus_addr_high != upper_32_bits(ring_base_addr))
+			return -EFAULT;
+	}
+
+	return 0;
+}
+
 static int phytmac_change_mtu(struct net_device *ndev, int new_mtu)
 {
 	if (netif_running(ndev))
@@ -176,7 +194,6 @@ static int phytmac_mdio_write_c45(struct mii_bus *bus, int mii_id, int devad, in

 	return 0;
 }
-
 static inline int hash_bit_value(int bitnr, __u8 *addr)
 {
 	if (addr[bitnr / 8] & (1 << (bitnr % 8)))
@@ -397,19 +414,36 @@ static int phytmac_alloc_tx_resource(struct phytmac *pdata)
 	struct phytmac_dma_desc *tx_ring_base;
 	dma_addr_t tx_ring_base_addr;
 	unsigned int q;
-	int size;
+	int tx_offset;
+	int tx_size;
+	int size = 0;
+	int ret, i;
+
+	tx_offset = TX_RING_BYTES(pdata) + pdata->tx_bd_prefetch + RING_ADDR_INTERVAL;
+	tx_size = pdata->queues_num * tx_offset;
+	for (i = 0; i < MAX_RING_ADDR_ALLOC_TIMES + 1; i++) {
+		if (i == MAX_RING_ADDR_ALLOC_TIMES)
+			goto err;
+
+		tx_ring_base = dma_alloc_coherent(pdata->dev, tx_size,
+						  &tx_ring_base_addr, GFP_KERNEL);
+		if (!tx_ring_base)
+			continue;

-	size = pdata->queues_num * (TX_RING_BYTES(pdata) + pdata->tx_bd_prefetch +
-				    RING_ADDR_INTERVAL);
-	tx_ring_base = dma_alloc_coherent(pdata->dev, size,
-					  &tx_ring_base_addr, GFP_KERNEL);
-	if (!tx_ring_base)
-		goto err;
+		ret = phytmac_queue_phyaddr_check(pdata, tx_ring_base_addr,
+						  tx_offset);
+		if (ret) {
+			dma_free_coherent(pdata->dev, tx_size, tx_ring_base,
+					  tx_ring_base_addr);
+			continue;
+		} else {
+			break;
+		}
+	}

 	for (q = 0, queue = pdata->queues; q < pdata->queues_num; ++q, ++queue) {
-		size = TX_RING_BYTES(pdata) + pdata->tx_bd_prefetch + RING_ADDR_INTERVAL;
-		queue->tx_ring = (void *)tx_ring_base + q * size;
-		queue->tx_ring_addr = tx_ring_base_addr + q * size;
+		queue->tx_ring = (void *)tx_ring_base + q * tx_offset;
+		queue->tx_ring_addr = tx_ring_base_addr + q * tx_offset;
 		if (!queue->tx_ring)
 			goto err;

@@ -428,7 +462,6 @@ static int phytmac_alloc_tx_resource(struct phytmac *pdata)
 				    "Allocated %d TX struct tx_skb entries at %p\n",
 				    pdata->tx_ring_size, queue->tx_skb);
 	}
-	tx_ring_base = NULL;

 	return 0;
 err:
@@ -443,21 +476,37 @@ static int phytmac_alloc_rx_resource(struct phytmac *pdata)
 	struct phytmac_hw_if *hw_if = pdata->hw_if;
 	struct phytmac_dma_desc *rx_ring_base;
 	dma_addr_t rx_ring_base_addr;
+	int rx_offset;
+	int rx_size;
 	unsigned int q;
-	int size;
-	int i;
+	int size = 0;
+	int ret, i;

-	size = pdata->queues_num * (RX_RING_BYTES(pdata) + pdata->rx_bd_prefetch +
-				    RING_ADDR_INTERVAL);
-	rx_ring_base = dma_alloc_coherent(pdata->dev, size,
-					  &rx_ring_base_addr, GFP_KERNEL);
-	if (!rx_ring_base)
-		goto err;
+	rx_offset = RX_RING_BYTES(pdata) + pdata->rx_bd_prefetch + RING_ADDR_INTERVAL;
+	rx_size = pdata->queues_num * rx_offset;
+	for (i = 0; i < MAX_RING_ADDR_ALLOC_TIMES + 1; i++) {
+		if (i == MAX_RING_ADDR_ALLOC_TIMES)
+			goto err;
+
+		rx_ring_base = dma_alloc_coherent(pdata->dev, rx_size,
+						  &rx_ring_base_addr, GFP_KERNEL);
+		if (!rx_ring_base)
+			continue;
+
+		ret = phytmac_queue_phyaddr_check(pdata, rx_ring_base_addr,
+						  rx_offset);
+		if (ret) {
+			dma_free_coherent(pdata->dev, rx_size, rx_ring_base,
+					  rx_ring_base_addr);
+			continue;
+		} else {
+			break;
+		}
+	}

 	for (q = 0, queue = pdata->queues; q < pdata->queues_num; ++q, ++queue) {
-		size = RX_RING_BYTES(pdata) + pdata->rx_bd_prefetch + RING_ADDR_INTERVAL;
-		queue->rx_ring = (void *)rx_ring_base + q * size;
-		queue->rx_ring_addr = rx_ring_base_addr + q * size;
+		queue->rx_ring = (void *)rx_ring_base + q * rx_offset;
+		queue->rx_ring_addr = rx_ring_base_addr + q * rx_offset;
 		if (!queue->rx_ring)
 			goto err;

@@ -479,7 +528,6 @@ static int phytmac_alloc_rx_resource(struct phytmac *pdata)
 				    "Allocated %d RX struct sk_buff entries at %p\n",
 				    pdata->rx_ring_size, queue->rx_skb);
 	}
-	rx_ring_base = NULL;

 	return 0;
 err:
@@ -763,7 +811,7 @@ static void phytmac_rx_clean(struct phytmac_queue *queue)
 			}

 			paddr = dma_map_single(pdata->dev, skb->data,
-					       pdata->rx_buffer_len, DMA_FROM_DEVICE);
+						pdata->rx_buffer_len, DMA_FROM_DEVICE);
 			if (dma_mapping_error(pdata->dev, paddr)) {
 				dev_kfree_skb(skb);
 				break;
@@ -1368,14 +1416,12 @@ void phytmac_pcs_link_up(struct phylink_pcs *pcs, unsigned int mode,
 			    phy_modes(interface), speed, duplex);
 	hw_if->pcs_linkup(pdata, interface, speed, duplex);
 }
-
 static const struct phylink_pcs_ops phytmac_pcs_phylink_ops = {
 	.pcs_config = phytmac_pcs_config,
 	.pcs_link_up = phytmac_pcs_link_up,
 };
-
 static struct phylink_pcs *phytmac_mac_select_pcs(struct phylink_config *config,
-						  phy_interface_t interface)
+						   phy_interface_t interface)
 {
 	struct phytmac *pdata = netdev_priv(to_net_dev(config->dev));

@@ -1391,7 +1437,6 @@ static struct phylink_pcs *phytmac_mac_select_pcs(struct phylink_config *config,

 	return &pdata->phylink_pcs;
 }
-
 static void phytmac_mac_config(struct phylink_config *config, unsigned int mode,
 			       const struct phylink_link_state *state)
 {
--
2.50.1
